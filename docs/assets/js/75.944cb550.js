(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{167:function(t,n,e){"use strict";e.r(n);var a=e(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),e("h5",{attrs:{id:"_1、什么是vuex？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是vuex？","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、什么是vuex？")]),t._v(" "),e("ul",[e("li",[t._v("每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。")])]),t._v(" "),e("h5",{attrs:{id:"_2、初始化vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、初始化vuex","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、初始化vuex")]),t._v(" "),e("p",[t._v("（1）下载vuex")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cnpm i vuex -D\n")])])]),e("p",[t._v("（2）建一个store文件夹（store/index.js）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 初始化vuex\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\n// 引入module\nimport app from './module/app';\n\nVue.use(Vuex);\n\n// 生成一个vuex实例\nexport default new Vuex.Store({\n  modules: {\n    app\n  }\n})\n")])])]),e("p",[t._v("（3）在store文件夹里建一个module文件夹用来存放数据（store/module/app.js）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 存放数据的地方\nconst state = {\n  num: 100\n}\n\n// 派生数据（很少用）\nconst getters = {\n    doubleNum(state){\n        return state.num*2\n    }\n}\n\n// 同步改变\nconst mutations = {\n  changeNum(state, payload){\n    state.num = payload;\n  }\n}\n\n// 异步改变\n// action提交的是mutation，而不是直接更变状态。\n// action可以包含任意异步操作。\nconst actions = {  \n\x3c!-- 分发action：\n\t应用场景：当一次action对应的数据的更改，必须依赖另外一个action中的数据更改时，必须在本此action中先去触发另外一个action操作；\n    另外一个action可能为同步，也可能为异步，如果为异步需要借助promise或者async函数； --\x3e\n    \x3c!--changeNumAsync(context, payload){--\x3e\n        \n    \x3c!--}--\x3e\n    changeNumAsync({commit}, payload){\n        commit('changeNum', payload)\n    }\n}\n\nexport default {\n  // 命名空间\n  namespaced: true, // 配合module使用\n  state,\n  actions,\n  getters,\n  mutations\n}\n")])])]),e("p",[t._v("（4）在main.js里面引入store")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Vue from 'vue'\nimport App from './App.vue'\n\nimport store from './store'\n\nnew Vue({\n  el: '#app',\n  store,\n  render: h => h(App)\n})\n\n")])])]),e("p",[t._v("（5）辅助函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mapState辅助函数\n写法：\n对象写法：\ncomputed：mapState({\n//写法一：箭头函数可使代码更简洁\n\tcount:state=> state.count \n//写法二：传字符串参数 'count' 等同于 `state => state.count`\n\tcount:state=> state.count \n\t\n//写法三：为了能够使用 `this` 获取局部状态，必须使用常规函数\n\tcount(state){ \nreturn state.count+this.a \n\n\t}\n})\n数组写法：\n当映射的计算属性的名称与 state 的子节点名称相同时\ncomputed:mapState([\n\t“count”\n])\n\nmapActions辅助函数\n在组件中分发action:\nmethods: {\n    ...mapActions([\n      'increment' // 映射 this.increment() 为 this.$store.dispatch('increment')\n    ]),\n    ...mapActions({\n      add: 'increment' // 映射 this.add() 为 this.$store.dispatch('increment')\n    })\n  }\n")])])]),e("p",[t._v("（6）在页面中使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div>\n    <button @click=\"changeNum('+')\">+</button>\n    <span>{{num}}</span>\n    <button @click=\"changeNum('-')\">-</button>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'app',\n    computed: {\n      num() {\n        return this.$store.state.app.num\n      }\n    },\n    methods: {\n      changeNum(type) {\n        if (type == '+') {\n          // this.$store.commit('changeNum', this.num+1)\n          this.$store.dispatch('changeNumAsync', this.num+1)\n        } else {\n          this.$store.commit('changeNum', this.num-1)\n        }\n      }\n    },\n    mounted(){\n      console.log(this.$store)\n    }\n  }\n<\/script>\n\n")])])])])}],!1,null,null,null);n.default=s.exports}}]);