(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{198:function(n,t,e){"use strict";e.r(t);var r=e(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"什么是防抖和节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是防抖和节流","aria-hidden":"true"}},[n._v("#")]),n._v(" 什么是防抖和节流")]),n._v(" "),e("ul",[e("li",[n._v("防抖"),e("br"),n._v("\n触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间；"),e("br"),n._v("\n当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时"),e("br"),n._v("\n思路："),e("br"),n._v("\n每次触发事件时都取消之前的延时调用方法：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function debounce(fn) {\n      let timeout = null; // 创建一个标记用来存放定时器的返回值\n      return function () {\n      clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n      timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n          fn.apply(this, arguments);\n      }, 500);\n      };\n  }\n  function sayHi() {\n      console.log('防抖成功');\n  }\n\n  var inp = document.getElementById('inp');\n  inp.addEventListener('input', debounce(sayHi)); // 防抖\n")])])]),e("ul",[e("li",[n._v("节流\n高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率。"),e("br"),n._v("\n当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴"),e("br"),n._v("\n思路："),e("br"),n._v("\n每次触发事件时都判断当前是否有等待执行的延时函数。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function throttle(fn) {\n     let canRun = true; // 通过闭包保存一个标记\n     return function () {\n       if (!canRun) return; // 在函数开头判断标记是否为 true，不为 true 则 return\n       canRun = false; // 立即设置为 false\n       setTimeout(() => { // 将外部传入的函数的执行放在 setTimeout 中\n         fn.apply(this, arguments);\n         // 最后在 setTimeout 执行完毕后再把标记设置为 true(关键) 表示可以执行下一次循环了。当定时器没有执行的时候标记永远是 false，在开头被 return 掉\n         canRun = true;\n       }, 500);\n     };\n   }\n   function sayHi(e) {\n     console.log(e.target.innerWidth, e.target.innerHeight);\n   }\n   window.addEventListener('resize', throttle(sayHi));\n")])])])])}],!1,null,null,null);t.default=a.exports}}]);